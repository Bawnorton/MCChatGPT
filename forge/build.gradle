plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

version = '0.2.1'
group = 'com.bawnorton.mcchatgpt' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'mcchatgpt-forge'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.18.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'mcchatgpt'

            mods {
                mcchatgpt {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'mcchatgpt'

            mods {
                mcchatgpt {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'mcchatgpt'

            mods {
                mcchatgpt {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'mcchatgpt', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                mcchatgpt {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()

    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

jarJar.enable()

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.0'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    minecraftLibrary jarJar(group: "io.reactivex.rxjava2", name: "rxjava", version: "[2.0.0,)") { transitive = false }

    minecraftLibrary jarJar(group: "com.squareup.retrofit2", name: "retrofit", version: "[2.9.0,)") { transitive = false }
    minecraftLibrary jarJar(group: "com.squareup.retrofit2", name: "adapter-rxjava2", version: "[2.9.0,)") { transitive = false }
    minecraftLibrary jarJar(group: "com.squareup.retrofit2", name: "converter-jackson", version: "[2.9.0,)") { transitive = false }

    minecraftLibrary jarJar(group: "com.squareup.okhttp3", name: "okhttp", version: "[3.14.9,)") { transitive = false }
    minecraftLibrary jarJar(group: "com.squareup.okio", name: "okio", version: "[1.17.2,)") { transitive = false }

    minecraftLibrary jarJar(group: "com.fasterxml.jackson.core", name: "jackson-annotations", version: "[2.10.1,)") { transitive = false }
    minecraftLibrary jarJar(group: "com.fasterxml.jackson.core", name: "jackson-core", version: "[2.10.1,)") { transitive = false }
    minecraftLibrary jarJar(group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "[2.12.7.1,)") { transitive = false }

    minecraftLibrary jarJar(group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: "[1.1.3,)") { transitive = false }

    minecraftLibrary jarJar(compileOnly(group: "org.projectlombok", name: "lombok", version: "[1.18.26,)")) { transitive = false }
    minecraftLibrary jarJar(annotationProcessor(group: "org.projectlombok", name: "lombok", version: "[1.18.26,)")) { transitive = false }

    minecraftLibrary jarJar(compileOnly(group: 'org.reactivestreams', name: 'reactive-streams', version: '[1.0.4,)')) { transitive = false }

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "mcchatgpt",
                "Specification-Vendor"    : "mcchatgptsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "mcchatgptsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

tasks.jarJar.finalizedBy('reobfJarJar')

reobf {
    jarJar { }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

apply from: "https://moddingtutorials.org/applesilicon.gradle"
